var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = JuliaBoyz","category":"page"},{"location":"#JuliaBoyz","page":"Home","title":"JuliaBoyz","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JuliaBoyz.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [JuliaBoyz]","category":"page"},{"location":"#JuliaBoyz.check_solution-Tuple{Any, Any}","page":"Home","title":"JuliaBoyz.check_solution","text":"Given a city and a potential solution, checks the validity of the solution.\n\nWorks by beginning at the first junction in an itinerary and check if the next junction  is in the adjacency list of the current node, returning false if it is not, and continuing on otherwise. Repeat until the end of the itinerary, and do this for all itineraries in the potential solution.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.generate_adjacency_list-Tuple{Any}","page":"Home","title":"JuliaBoyz.generate_adjacency_list","text":"Generates an adjacency list for the junctions of the currently loaded city to represent the graph. Returns a Dict mapping each junction index to a Set{Int64} containing all adjacent junctions' indices.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.generate_adjacency_matrix-Tuple{Any}","page":"Home","title":"JuliaBoyz.generate_adjacency_matrix","text":"Generates an adjacency matrix for the junctions of the currently loaded city to represent the graph. Returns a Tuple of two sparse matrices containing all the durations and distances, respectively, of streets between a starting junction (rows) and an ending junction (columns).\n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.generate_upper_bound-Tuple{Any}","page":"Home","title":"JuliaBoyz.generate_upper_bound","text":"Naively generates an upper bound on the possible distance by sorting all available streets by  duration to distance ratio, and adding until all time is used up (across all cars), or all  streets are traversed.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.get_adjacent_streets-Tuple{Any}","page":"Home","title":"JuliaBoyz.get_adjacent_streets","text":"Generates an adjacency list for the streets adjacent to all junctions of the currently loaded city to represent the graph. Returns a Dict mapping each junction index to a Vector{Street} containing all its adjacent streets.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.greedy_dfs_solution-Tuple{Any}","page":"Home","title":"JuliaBoyz.greedy_dfs_solution","text":"ADD DOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.read_city-Tuple{Any}","page":"Home","title":"JuliaBoyz.read_city","text":"Given the path for a file containing a text file of a problem in the specified format, creates a JBCity instance with the relevant information. \n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.shortest_path-Tuple{Any, Any, Any}","page":"Home","title":"JuliaBoyz.shortest_path","text":"Computes the shortest path between two given junctions using Djikstra's algorithm. Returns a Tuple containing the sequence of junctions (represented by their indices, including the start/finish junctions) that give the shortest path and the duration of the path.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaBoyz.solution_distance-Tuple{Any}","page":"Home","title":"JuliaBoyz.solution_distance","text":"Computes the distance covered by all 8 cars.\n\n\n\n\n\n","category":"method"}]
}
